name: Deploy NC Soccer Hudson Application

on:
  push:
    branches: [main]
    paths:
      - 'ui/**'
      - 'analysis/**'
      - '.github/workflows/deploy.yml'
      - 'terraform/**'
  pull_request:
    branches: [main]
    paths:
      - 'ui/**'
      - 'analysis/**'
      - 'terraform/**'
  workflow_dispatch:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          uv pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest -xvs

  setup-oidc:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    outputs:
      role_arn: ${{ steps.terraform-output.outputs.role_arn }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials for OIDC Setup
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-2
          role-to-assume: ${{ secrets.AWS_SETUP_ROLE_ARN }}

      - name: Terraform Init (OIDC setup)
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply (OIDC setup)
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Get Terraform Output
        id: terraform-output
        run: |
          cd terraform
          echo "role_arn=$(terraform output -raw github_actions_role_arn)" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: [test, setup-oidc]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ needs.setup-oidc.outputs.role_arn }}
          aws-region: us-east-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform/ec2
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform/ec2
          terraform apply -auto-approve
        env:
          TF_VAR_basic_auth_password: ${{ secrets.BASIC_AUTH_PASSWORD }}
          TF_VAR_anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}

      - name: Get EC2 Host
        id: get-ec2
        run: |
          cd terraform/ec2
          echo "ec2_host=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.get-ec2.outputs.ec2_host }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Clean up any previous deployment
            rm -rf /home/ec2-user/streamlit-app.tmp

            # Clone the repository to a temporary location
            git clone https://github.com/${{ github.repository }}.git /home/ec2-user/streamlit-app.tmp

            # Move the app to the correct location
            sudo rsync -av --delete /home/ec2-user/streamlit-app.tmp/ /home/ec2-user/streamlit-app/
            sudo chown -R ec2-user:ec2-user /home/ec2-user/streamlit-app

            # Install dependencies
            cd /home/ec2-user/streamlit-app
            pip3 install -r requirements.txt

            # Restart the Streamlit service
            sudo systemctl restart streamlit
            sudo systemctl enable streamlit

            # Reload Nginx
            sudo systemctl reload nginx

            # Clean up
            rm -rf /home/ec2-user/streamlit-app.tmp