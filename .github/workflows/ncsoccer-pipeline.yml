name: NC Soccer Hudson Pipeline

on:
  # Trigger deployment only on tag pushes
  push:
    tags:
      - 'v*.*.*'

  # Run PR checks on pull requests to main and develop
  pull_request:
    branches: [main, develop]

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests'
        required: true
        default: 'true'
      run_build:
        description: 'Run build'
        required: true
        default: 'true'

jobs:
  # Run tests on PRs and manual trigger
  test:
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_tests == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install --system -r requirements.in

      - name: Run tests
        run: |
          echo "Running tests..."
          # Add your test commands here, for example:
          # pytest -xvs

  # Build Docker image on PRs and manual trigger
  docker-build:
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_build == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ui/Dockerfile
          push: false
          load: true
          tags: ncsoccer-ui:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Create test environment variables
          echo "ANTHROPIC_API_KEY=test-key" > .env.test
          echo "BASIC_AUTH_USERNAME=test-user" >> .env.test
          echo "BASIC_AUTH_PASSWORD=test-password" >> .env.test

          # Run container in detached mode
          docker run -d --name ncsoccer-test --env-file .env.test -p 8501:8501 ncsoccer-ui:test

          # Wait for container to start
          sleep 10

          # Check if container is running
          docker ps | grep ncsoccer-test

          # Check if Streamlit health endpoint is accessible
          curl --silent --fail http://localhost:8501/_stcore/health || exit 1

          # Display container logs for debugging
          docker logs ncsoccer-test

          # Stop and remove container
          docker stop ncsoccer-test
          docker rm ncsoccer-test

  # Verify changelog when a tag is pushed
  verify-changelog:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get tag version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Verify version exists in CHANGELOG.md
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if ! grep -q "\[$VERSION\]" CHANGELOG.md; then
            echo "Error: Version $VERSION not found in CHANGELOG.md"
            echo "Please update the CHANGELOG.md file with the new version before tagging."
            exit 1
          fi
          echo "Version $VERSION found in CHANGELOG.md"

  # Deploy to EC2 when a tag is pushed and changelog verification passes
  deploy:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: verify-changelog
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get tag version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AWS_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          # Use IP address directly and add error handling
          echo "Running ssh-keyscan..."
          # Try IP address
          ssh-keyscan -H 3.15.145.20 >> ~/.ssh/known_hosts || echo "Warning: ssh-keyscan using IP address failed"
          # Try hostname
          ssh-keyscan -H ec2-3-15-145-20.us-east-2.compute.amazonaws.com >> ~/.ssh/known_hosts || echo "Warning: ssh-keyscan using hostname failed"
          # Show known_hosts content
          echo "Contents of known_hosts:"
          cat ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          echo "Deploying version $VERSION to production server"

          # Connect via SSH and execute deployment commands
          # Use IP address for consistency
          ssh -o StrictHostKeyChecking=accept-new ec2-user@3.15.145.20 << 'EOF'
            # Check what directories exist and show environment info
            echo "Current directory: $(pwd)"
            echo "Listing home directory:"
            ls -la /home/ec2-user/

            # Create application directory if it doesn't exist
            if [ ! -d "/home/ec2-user/ncsoccer-agent" ]; then
              echo "Creating ncsoccer-agent directory..."
              mkdir -p /home/ec2-user/ncsoccer-agent
            fi

            cd /home/ec2-user/ncsoccer-agent

            # Check if it's a git repository, if not clone it
            if [ ! -d ".git" ]; then
              echo "Initializing Git repository..."
              git init
              git remote add origin https://github.com/mzakany23/ncsh-agent.git
            fi

            # Pull the latest code for the tag
            echo "Fetching latest code and tags..."
            git fetch --all --tags
            git checkout ${{ steps.get_version.outputs.version }} || git checkout main

            # Create the Docker container if not already running
            echo "Setting up Docker container..."
            cd ui

            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo amazon-linux-extras install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Check if docker-compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose not found, installing..."
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Build and start the container
            echo "Building and starting the Docker container..."
            docker-compose down
            docker-compose build
            docker-compose up -d

            # Verify the service is running
            echo "Checking service status..."
            docker-compose ps
          EOF

      - name: Notify deployment complete
        run: echo "Deployment of version ${{ steps.get_version.outputs.version }} completed successfully!"