name: NC Soccer Hudson Pipeline

on:
  # Trigger deployment only on tag pushes
  push:
    tags:
      - 'v*.*.*'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      run_build:
        description: 'Run build'
        required: true
        default: 'true'

jobs:
  # Verify changelog when a tag is pushed
  verify-changelog:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get tag version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Verify version exists in CHANGELOG.md
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if ! grep -q "\[$VERSION\]" CHANGELOG.md; then
            echo "Error: Version $VERSION not found in CHANGELOG.md"
            echo "Please update the CHANGELOG.md file with the new version before tagging."
            exit 1
          fi
          echo "Version $VERSION found in CHANGELOG.md"

  # Deploy to EC2 when a tag is pushed and changelog verification passes
  deploy:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: verify-changelog
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get tag version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AWS_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          # Use IP address directly and add error handling
          echo "Running ssh-keyscan..."
          # Try IP address
          ssh-keyscan -H 3.15.145.20 >> ~/.ssh/known_hosts || echo "Warning: ssh-keyscan using IP address failed"
          # Try hostname
          ssh-keyscan -H ec2-3-15-145-20.us-east-2.compute.amazonaws.com >> ~/.ssh/known_hosts || echo "Warning: ssh-keyscan using hostname failed"
          # Show known_hosts content
          echo "Contents of known_hosts:"
          cat ~/.ssh/known_hosts

      - name: Prepare deploy commands
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          BASIC_AUTH_PASSWORD: ${{ secrets.BASIC_AUTH_PASSWORD }}
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          echo "Deploying version $VERSION to production server"

          # Create a deploy script
          cat > /tmp/deploy.sh << 'SCRIPT'
          #!/bin/bash
          set -e
          # install sudo
          yum install -y sudo || echo "Cannot install sudo, may already be installed"

          # Set PATH to include common binary locations
          export PATH=$PATH:/usr/local/bin:/usr/bin
          echo "PATH is set to: $PATH"

          # Check what directories exist and show environment info
          echo "Current directory: $(pwd)"
          echo "Listing home directory:"
          ls -la /home/ec2-user/

          # Create application directory if it doesn't exist
          if [ ! -d "/home/ec2-user/ncsoccer-agent" ]; then
            echo "Creating ncsoccer-agent directory..."
            mkdir -p /home/ec2-user/ncsoccer-agent
          fi

          cd /home/ec2-user/ncsoccer-agent

          # Check if it's a git repository, if not clone it
          if [ ! -d ".git" ]; then
            echo "Initializing Git repository..."
            git init
            git remote add origin https://github.com/mzakany23/ncsh-agent.git
          fi

          # Pull the latest code for the tag
          echo "Fetching latest code and tags..."
          git fetch --all --tags -f

          # Clean and checkout the tag, with fallback to main
          echo "Checking out version VERSION_PLACEHOLDER..."
          git checkout main
          git reset --hard origin/main
          git checkout VERSION_PLACEHOLDER || echo "Warning: Tag checkout failed, using main branch instead"

          # Create the Docker container if not already running
          echo "Setting up Docker container..."
          cd ui

          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo amazon-linux-extras install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            echo "You've been added to the docker group. This would normally require re-logging in."
          fi

          # Ensure docker permissions
          echo "Checking Docker socket permissions..."
          ls -la /var/run/docker.sock || echo "Docker socket not found or not accessible"

          # Check if user is in docker group
          if groups | grep -q '\bdocker\b'; then
            echo "User is in the docker group"
          else
            echo "User is not in the docker group, trying to add..."
            sudo usermod -aG docker $USER || echo "Could not add user to docker group"
            echo "Will use sudo for docker commands"
          fi

          # Try to fix docker socket permissions if needed
          if [ ! -r /var/run/docker.sock ]; then
            echo "Cannot read docker socket, trying to fix permissions..."
            sudo chmod 666 /var/run/docker.sock || echo "Could not change docker socket permissions"
          fi

          # Check if docker-compose is installed
          if ! command -v docker-compose &> /dev/null; then
            echo "docker-compose not found, installing..."
            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o docker-compose
            chmod +x docker-compose
            echo "Moving docker-compose to /usr/local/bin/"
            sudo mv docker-compose /usr/local/bin/

            # Create symlinks to all likely locations
            echo "Creating symlinks for docker-compose..."
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

            # Add to current PATH immediately
            export PATH=$PATH:/usr/local/bin

            # Verify installation
            echo "Testing docker-compose..."
            ls -la /usr/local/bin/docker-compose || echo "File not found in /usr/local/bin"
            ls -la /usr/bin/docker-compose || echo "File not found in /usr/bin"
            which docker-compose || echo "docker-compose not in PATH"
            docker-compose --version || echo "Failed to run docker-compose --version"
          fi

          # Create .env file with required variables
          echo "Creating .env file with required API keys..."
          echo "ANTHROPIC_API_KEY=ANTHROPIC_KEY_PLACEHOLDER" > .env
          echo "BASIC_AUTH_USERNAME=ncsoccer" >> .env
          echo "BASIC_AUTH_PASSWORD=AUTH_PASSWORD_PLACEHOLDER" >> .env

          # Function to run docker commands with sudo if needed
          run_docker_cmd() {
            if [ -w /var/run/docker.sock ] || groups | grep -q '\bdocker\b'; then
              echo "Running without sudo: $@"
              "$@"
            else
              echo "Running with sudo: $@"
              sudo "$@"
            fi
          }

          # Build and start the container
          echo "Building and starting the Docker container..."

          # Explicitly check for and remove any existing container with the same name
          echo "Checking for existing containers with name 'ncsoccer-ui'..."
          if run_docker_cmd docker ps -a --format '{{.Names}}' | grep -q "ncsoccer-ui"; then
            echo "Found existing container named 'ncsoccer-ui'. Stopping and removing it..."
            run_docker_cmd docker stop ncsoccer-ui || true
            run_docker_cmd docker rm ncsoccer-ui || true
          fi

          # Check if docker-compose exists and is executable
          if [ -x "$(command -v docker-compose)" ]; then
            echo "Using docker-compose..."
            # Make sure any containers from previous docker-compose runs are stopped and removed
            run_docker_cmd docker-compose down --remove-orphans || true
            run_docker_cmd docker-compose build
            run_docker_cmd docker-compose up -d
          else
            echo "Checking if docker-compose exists in known locations..."
            ls -la /usr/local/bin/docker-compose || echo "Not found in /usr/local/bin"
            ls -la /usr/bin/docker-compose || echo "Not found in /usr/bin"

            echo "Falling back to regular docker commands..."
            # Stop and remove existing container if it exists
            run_docker_cmd docker stop ncsoccer-ui || true
            run_docker_cmd docker rm ncsoccer-ui || true
            # Build and run the container
            run_docker_cmd docker build -t ncsoccer-ui -f Dockerfile .
            run_docker_cmd docker run -d --name ncsoccer-ui --restart unless-stopped \
              -p 8501:8501 \
              -e ANTHROPIC_API_KEY="$ANTHROPIC_API_KEY" \
              -e BASIC_AUTH_USERNAME=ncsoccer \
              -e BASIC_AUTH_PASSWORD="$BASIC_AUTH_PASSWORD" \
              ncsoccer-ui
          fi

          # Verify the service is running
          echo "Checking service status..."
          if [ -x "$(command -v docker-compose)" ]; then
            run_docker_cmd docker-compose ps
          else
            run_docker_cmd docker ps | grep ncsoccer-ui || echo "No ncsoccer-ui container found"
          fi
          SCRIPT

          # Replace placeholders
          sed -i.bak "s/VERSION_PLACEHOLDER/$VERSION/g" /tmp/deploy.sh
          sed -i.bak "s/ANTHROPIC_KEY_PLACEHOLDER/$ANTHROPIC_API_KEY/g" /tmp/deploy.sh
          sed -i.bak "s/AUTH_PASSWORD_PLACEHOLDER/$BASIC_AUTH_PASSWORD/g" /tmp/deploy.sh

          # Make script executable
          chmod +x /tmp/deploy.sh

      - name: Copy and execute deploy script
        run: |
          # Copy the script to the server
          scp -o StrictHostKeyChecking=accept-new /tmp/deploy.sh ec2-user@3.15.145.20:/tmp/deploy.sh

          # Execute the script on the server
          ssh -o StrictHostKeyChecking=accept-new ec2-user@3.15.145.20 "bash /tmp/deploy.sh"

          # Clean up
          ssh -o StrictHostKeyChecking=accept-new ec2-user@3.15.145.20 "rm /tmp/deploy.sh"
          rm /tmp/deploy.sh

      - name: Notify deployment complete
        run: echo "Deployment of version ${{ steps.get_version.outputs.version }} completed successfully!"